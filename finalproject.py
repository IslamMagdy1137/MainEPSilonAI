# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DGmtBrkUjwfoS0DnuqLX57EAqJsBfWGc

# Epsilon Graduation Project

## Used Cars Price Prediction
"""

# after reading and understanding the data and each column meaning
# started with the data preprocessing

# then the uni variant data analysis
# top region got have resale cars
# most car brand exist in the market for resale
# most brand year cars are in the market
# average odometer cars resale in every region
# cars conditions in the market
# Most common fuel type
# price distribution
# top manufacturer car exist
# cars cylinders make difference in petrol usage
# top posting days
# long and lat diffiens the location
# top country
# top state

# then the bi variant analysis
# brand cars and thier cylinders
# brand cars and their colors
# most expensive brand cars
# top cars made muc odometer before resale
# brand cars and thier conditions

# using machine learning algorithms like linear regression, SVM and RandomForestRegressor to predict cars price
# we use the three algorithms and tune thier hyper parameter to reach the maximum accuracy and choose the best algorithm to use it
# use ensemble method with the three algorithms which will tell use the best algorithm and the best accuracy
# using



!pip install datasist
!pip install category_encoders
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer,KNNImputer
from datasist.structdata import detect_outliers
from sklearn.model_selection import train_test_split
import category_encoders as ce
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PowerTransformer

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Final/train-data.csv'
df = pd.read_csv(file_path)

"""# 1. Data cleaning

### 1.1 Investegation
"""

df.info()

df.describe()

df.duplicated().sum()

"""###  1.2 Working with data issues

### Dropping duplicated and unused columns
"""

df.drop_duplicates(inplace=True)

df.drop(["New_Price","Unnamed: 0"], axis=1, inplace=True)

"""### Imputing Null values"""

from sklearn.impute import SimpleImputer

null_col = ['Mileage', 'Engine' , 'Power','Seats']
imputer = SimpleImputer(strategy='most_frequent')
df[null_col] = imputer.fit_transform(df[null_col])

df = df.convert_dtypes()

"""### replacing zero values"""

df['Seats'].replace(to_replace=0 ,value= df['Seats'].mode()[0],inplace=True)

df[df['Power'] == 'null bhp']

indx = df[df['Power'] == 'null bhp'].index

df.drop(indx,axis=0,inplace=True)

dirty_cols = ['Mileage', 'Engine', 'Power']

for col in dirty_cols:
    df[col] = df[col].apply(lambda x : float(x.split()[0]))

df.info()

"""# 2. Feature Engineering"""

df["Name"].nunique()

print("Percentage of uniques",round(df["Name"].nunique()/df.shape[0]*100),"%")

df["Name"]

df["Brand"] = df["Name"].apply(lambda x : x.split()[0])

df["Brand"].nunique()

df["Name"] = df["Name"].apply(lambda x : " ".join(x.split()[:2]))

df["Name"].nunique()

df = df.convert_dtypes()

df.info()

df.describe()

"""________________________

# 3. Data understanding

### 3.1 Univariate analysis
"""

sns.histplot(data = df , x = 'Kilometers_Driven');
sns.set(rc={'figure.figsize': [8, 8]}, font_scale=1.2)

sns.histplot(data = df , x = 'Mileage');

sns.histplot(data = df , x = 'Engine');

sns.histplot(data = df , x = 'Power');

sns.histplot(data = df , x = 'Price');

numerical_cols = ['Kilometers_Driven' , 'Mileage' , 'Engine' , 'Power','Price']

from datasist.structdata import detect_outliers

df_nums = df.copy()
outliears = detect_outliers(df_nums[numerical_cols],0,df_nums[numerical_cols].columns)
df_nums.drop(outliears,inplace=True)

sns.histplot(data = df_nums , x = 'Kilometers_Driven');

sns.histplot(data = df_nums , x = 'Mileage');

sns.histplot(data = df_nums , x = 'Engine');

sns.histplot(data = df_nums , x = 'Power');

sns.histplot(data = df_nums , x = 'Price');

"""## 3.2 BiVariant Analysis"""

sns.boxplot(data=df, x='Brand', y='Price')

sns.boxplot(data=df, x='Transmission', y='Price')

sns.scatterplot(data = df , x = "Kilometers_Driven" , y ="Price")

sns.scatterplot(data = df , x ="Year" , y = 'Price' )

df.columns

df

"""# 4. Data pre-processing

### 4.1 Data transformation

#### 4.1.1 Catogerical transformation

##### 4.1.1.1 ordinal transformation
"""

transformation = {
    "First":3,
    "Second":2,
    "Third":1,
    "Fourth & Above":0
}

df['Owner_Type'] = df['Owner_Type'].map(transformation)

"""##### 4.1.1.2 Nominal transformation

"""

Nominal_data = ['Name','Location','Fuel_Type','Transmission','Brand']
binaryencoder = ce.BinaryEncoder(cols=Nominal_data)
df = binaryencoder.fit_transform(df)

Numerical_data = ['Year','Kilometers_Driven','Mileage','Engine','Power','Seats','Price']

"""#### 4.2.1 Numerical transformation"""

new_df = pd.DataFrame(index=df.index)  # empty result frame with same index

for col in df.columns:
    try:
        pt = PowerTransformer(method='yeo-johnson')
        transformed_col = pt.fit_transform(df[[col]])
        new_df[col] = transformed_col.flatten()
    except Exception as e:
        print(f"Skipping column '{col}' due to error: {e}")

"""### 4.1 Data splitting"""

X, y = new_df.drop("Price",axis=1) , new_df["Price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""# 5.0 Modeling"""

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LassoCV
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import ElasticNetCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_validate
np.seterr(divide='ignore', invalid='ignore', over='ignore')

"""### 5.1 Linear regression"""

reg = LinearRegression().fit(X_train,(y_train))
print("R-Squered Trian",round((reg.score(X_train,  (y_train))*100),2),'%')
print("R-Squered Test",round((reg.score(X_test,  (y_test))*100),2),'%')
y_pred = reg.predict(X_test)
print(f"RMSE: {mean_squared_error(y_pred,(y_test))}")

"""### 5.3 Linear regression (Lasso method)"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 2)
poly_reg.fit(X_train)

X_train = poly_reg.transform(X_train)
X_test = poly_reg.transform(X_test)

reg = LassoCV().fit(X_train,(y_train))
print("R-Squered Trian",round((reg.score(X_train,  (y_train))*100),2),'%')
print("R-Squered Test",round((reg.score(X_test,  (y_test))*100),2),'%')
y_pred = reg.predict(X_test)
print(f"RMSE: {mean_squared_error(y_pred,(y_test))}")

"""### 5.4 Linear regression (Ridge method)"""

reg = RidgeCV().fit(X_train,(y_train))
print("R-Squered Trian",round((reg.score(X_train,  (y_train))*100),2),'%')
print("R-Squered Test",round((reg.score(X_test,  (y_test))*100),2),'%')
y_pred = reg.predict(X_test)
print(f"RMSE: {mean_squared_error(y_pred,(y_test))}")

"""### 5.4 Linear regression (ElasticNetCV method)"""

reg = ElasticNetCV().fit(X_train,(y_train))
print("R-Squered Trian",round((reg.score(X_train,  (y_train))*100),2),'%')
print("R-Squered Test",round((reg.score(X_test,  (y_test))*100),2),'%')
y_pred = reg.predict(X_test)
print(f"RMSE: {mean_squared_error(y_pred,(y_test))}")

"""## 5.5 Random Forest Regressior and tunning parrameter in it"""

rf_reg = RandomForestRegressor(n_estimators=120,max_depth=10)
rf_reg.fit(X_train, y_train);
print(rf_reg.score(X_train, y_train))
print(rf_reg.score(X_test, y_test))
print(f"RMSE: {mean_squared_error(y_pred,(y_test))}")

"""# 6 Ensemble Method with Pipeline"""

models = list()
models.append(("LR",LinearRegression()))
models.append(("Lasso",LassoCV()))
models.append(("Ridge",RidgeCV()))
models.append(("ElasticNet",ElasticNetCV()))
models.append(("Random Forest",RandomForestRegressor(n_estimators=120,max_depth=10)))

for model in models:
    steps = list()
    #steps.append(("Scaler" , StandardScaler()))
    steps.append(model)
    pipeline = Pipeline(steps = steps)
    scores = cross_validate(pipeline , X , y , cv = 5  , scoring="r2" , return_train_score=True)
    print(model[0])
    print("Train_accuracy", scores["train_score"].mean())
    print("Test_accuracy" , scores["test_score"].mean())
    print("-" * 25)

"""## 7 Grid Search"""

params  = [
    { "Random Forest__max_depth" : [10, 15, 20] }
]

from sklearn.model_selection import GridSearchCV

grid = GridSearchCV(estimator = pipeline , param_grid = params , cv = 5  ,return_train_score=True ,  scoring = "r2" )

grid.fit(X,y)

grid.best_params_

grid.cv_results_["mean_train_score"].max()

grid.cv_results_["mean_test_score"].max()

"""## 8 Deployment"""

!pip install streamlit
import joblib
import streamlit as st

joblib.dump(reg , "final_model.h5")
joblib.dump(df.columns,"input_dep.h5")

df.columns

st.title("Know your car price")

inputs = joblib.load("input_dep.h5")
model = joblib.load("final_model.h5")

def predict(Name, Location, Year, Kilometers_Driven, Fuel_Type,Transmission, Owner_Type, Mileage, Engine, Power, Seats,Brand):
    test_df = pd.DataFrame(columns = inputs)
    test_df.at[0,'Name'] = Name
    test_df.at[0,'Location'] = Location
    test_df.at[0,'Year'] = Year
    test_df.at[0,'Kilometers_Driven'] = Kilometers_Driven
    test_df.at[0,'Fuel_Type'] = Fuel_Type
    test_df.at[0,'Transmission'] = Transmission
    test_df.at[0, 'Owner_Type'] = Owner_Type
    test_df.at[0, 'Mileage'] = Mileage
    test_df.at[0, 'Engine'] = Engine
    test_df.at[0, 'Power'] = Power
    test_df.at[0, 'Seats'] = Seats
    test_df.at[0, 'Brand'] = Brand

    print(test_df)
    result = model.predict(test_df)[0]
    return result

def main():
    Name = st.selectbox('Name',('Maruti Wagon','Hyundai Creta', 'Honda Jazz','Maruti Ertiga','Audi A4'
                                ,'Hyundai EON','Nissan Micra','Toyota Innova','Volkswagen Vento','Tata Indica','Ford Fusion',
                                'Mercedes-Benz SL-Class','BMW Z4','Toyota Prius','Force One','Maruti Versa','Honda WR-V',
                                'Bentley Continental',   'Lamborghini Gallardo','Jaguar F'))
    Location = st.selectbox('Location',('Mumbai', 'Hyderabad', 'Kochi', 'Coimbatore', 'Pune', 'Delhi',
       'Kolkata', 'Chennai', 'Jaipur', 'Bangalore', 'Ahmedabad'))
    Year = st.slider("Year" , min_value=1980, max_value=2040, value=2000, step=1)
    Kilometers_Driven = st.slider("Kilometers_Driven" , min_value=1, max_value=999999, value=1, step=100)
    Fuel_Type = st.selectbox("Fuel_Type",('CNG', 'Diesel', 'Petrol', 'LPG', 'Electric'))
    Transmission = st.selectbox("Transmission",('Manual', 'Automatic'))
    Owner_Type = st.selectbox("Owner_Type",('First', 'Second', 'Fourth & Above', 'Third'))
    Mileage =  st.slider("Mileage" , min_value=1, max_value=999999, value=1, step=100)
    Engine = st.slider("Engine" , min_value=0, max_value=6000, value=100, step=100)
    Power = st.slider("Power" , min_value=10, max_value=800, value=10, step=10)
    Seats = st.slider("Seats" , min_value=1, max_value=20, value=1, step=1)
    Brand = st.selectbox("Brand",('Maruti','Hyundai','Honda','Audi',
        'Nissan',        'Toyota',    'Volkswagen',          'Tata',
          'Land',    'Mitsubishi',       'Renault', 'Mercedes-Benz',
           'BMW',      'Mahindra',          'Ford',       'Porsche',
        'Datsun',        'Jaguar',         'Volvo',     'Chevrolet',
         'Skoda',          'Mini',          'Fiat',          'Jeep',
    'Ambassador',         'Isuzu',         'ISUZU',         'Force',
       'Bentley',   'Lamborghini'))


    if st.button("test"):
        print(Name, Location, int(Year), int(Kilometers_Driven), Fuel_Type,Transmission, Owner_Type, int(Mileage), int(Engine), int(Power), int(Seats) , Brand)
    if st.button("predict"):
        restult = predict(Name, Location, int(Year), int(Kilometers_Driven), Fuel_Type,Transmission, Owner_Type, int(Mileage), int(Engine), int(Power), int(Seats),Brand)

        st.text("The price is {}".format(restult))
if __name__ == '__main__':
    main()

!streamlit run app.py



# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import pandas as pd
# import numpy as np
# import joblib
# import streamlit as st
# 
# st.title("Know your car price")
# 
# inputs = joblib.load("input_dep.h5")
# model = joblib.load("final_model.h5")
# 
# def predict(Name, Location, Year, Kilometers_Driven, Fuel_Type,Transmission, Owner_Type, Mileage, Engine, Power, Seats,Brand):
#     test_df = pd.DataFrame(columns = inputs)
#     test_df.at[0,'Name'] = Name
#     test_df.at[0,'Location'] = Location
#     test_df.at[0,'Year'] = Year
#     test_df.at[0,'Kilometers_Driven'] = Kilometers_Driven
#     test_df.at[0,'Fuel_Type'] = Fuel_Type
#     test_df.at[0,'Transmission'] = Transmission
#     test_df.at[0, 'Owner_Type'] = Owner_Type
#     test_df.at[0, 'Mileage'] = Mileage
#     test_df.at[0, 'Engine'] = Engine
#     test_df.at[0, 'Power'] = Power
#     test_df.at[0, 'Seats'] = Seats
#     test_df.at[0, 'Brand'] = Brand
# 
#     print(test_df)
#     result = model.predict(test_df)[0]
#     return result
# 
# def main():
#     Name = st.selectbox('Name',('Maruti Wagon','Hyundai Creta', 'Honda Jazz','Maruti Ertiga','Audi A4'
#                                 ,'Hyundai EON','Nissan Micra','Toyota Innova','Volkswagen Vento','Tata Indica','Ford Fusion',
#                                 'Mercedes-Benz SL-Class','BMW Z4','Toyota Prius','Force One','Maruti Versa','Honda WR-V',
#                                 'Bentley Continental',   'Lamborghini Gallardo','Jaguar F'))
#     Location = st.selectbox('Location',('Mumbai', 'Hyderabad', 'Kochi', 'Coimbatore', 'Pune', 'Delhi',
#        'Kolkata', 'Chennai', 'Jaipur', 'Bangalore', 'Ahmedabad'))
#     Year = st.slider("Year" , min_value=1980, max_value=2040, value=2000, step=1)
#     Kilometers_Driven = st.slider("Kilometers_Driven" , min_value=1, max_value=999999, value=1, step=100)
#     Fuel_Type = st.selectbox("Fuel_Type",('CNG', 'Diesel', 'Petrol', 'LPG', 'Electric'))
#     Transmission = st.selectbox("Transmission",('Manual', 'Automatic'))
#     Owner_Type = st.selectbox("Owner_Type",('First', 'Second', 'Fourth & Above', 'Third'))
#     Mileage =  st.slider("Mileage" , min_value=1, max_value=999999, value=1, step=100)
#     Engine = st.slider("Engine" , min_value=0, max_value=6000, value=100, step=100)
#     Power = st.slider("Power" , min_value=10, max_value=800, value=10, step=10)
#     Seats = st.slider("Seats" , min_value=1, max_value=20, value=1, step=1)
#     Brand = st.selectbox("Brand",('Maruti','Hyundai','Honda','Audi',
#         'Nissan',        'Toyota',    'Volkswagen',          'Tata',
#           'Land',    'Mitsubishi',       'Renault', 'Mercedes-Benz',
#            'BMW',      Mahindra',          'Ford',       'Porsche',
#         'Datsun',        'Jaguar',         'Volvo',     'Chevrolet',
#          'Skoda',          'Mini',          'Fiat',          'Jeep',
#     'Ambassador',         'Isuzu',         'ISUZU',         'Force',
#        'Bentley',   'Lamborghini'))
# 
# 
#     if st.button("test"):
#         print(Name, Location, int(Year), int(Kilometers_Driven), Fuel_Type,Transmission, Owner_Type, int(Mileage), int(Engine), int(Power), int(Seats) , Brand)
#     if st.button("predict"):
#         restult = predict(Name, Location, int(Year), int(Kilometers_Driven), Fuel_Type,Transmission, Owner_Type, int(Mileage), int(Engine), int(Power), int(Seats),Brand)
# 
#         st.text("The price is {}".format(restult))
# if __name__ == '__main__':
#     main()

!streamlit run app.py

